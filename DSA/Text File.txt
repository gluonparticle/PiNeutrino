PROGRAM 5A

5. Develop a Program in C for the following Stack Applications
a. Evaluation of Suffix expression with single digit operands and operators: +, -, *, /, %, ^

#include <stdio.h>
#include <math.h>
#include <string.h>
#include <ctype.h>
double compute(char symbol, double op1, double op2) {
 switch (symbol) {
 case '+':
 return op1 + op2;
 case '-':
 return op1 - op2;
 case '*':
 return op1 * op2;
 case '/':
 return op1 / op2;
 case '$':
 case '^':
 return pow(op1, op2);
 case '%':
 return fmod(op1 , op2);
 default:
 return 0;
 }
}
int main() {
 double s[100];
 double res, op1, op2;
 int top = -1, i;
 char postfix[100], symbol;
 printf("\nEnter the postfix expression:\n");
 fgets(postfix, sizeof(postfix), stdin);
 for (i = 0; i < strlen(postfix); i++) {
 symbol = postfix[i];
 if (isspace(symbol))
 continue;
 if (isdigit(symbol)) {
 s[++top] = symbol - '0';
 } else {
 op2 = s[top--];
 op1 = s[top--];
 res = compute(symbol, op1, op2);
 s[++top] = res;
 }
 }
 res = s[top--];
 printf("\nThe result is : %f\n", res);
 return 0;
}


OUTPUT
Enter the postfix expression:
2 3 1 * + 9 -

The result is : -4.000000
















PROGRAM 5B

b. Solving Tower of Hanoi problem with n disks.
#include<stdlib.h>
#include<stdlib.h>
int count = 0;
void hanoi(int n,int src,int temp,int des){
  if(n==0)
  return;
  hanoi(n-1,src,des,temp);
  printf("\nMove %d disk from %c to %c",n,src,des);
  count++;
  hanoi(n-1,temp,src,des);
}

int main(){
  int n;
  printf("Enter the Number of Disks:");
  scanf("%d",&n);
  hanoi(n,'A','B','C');
  printf("\nTotal number of moves : %d",count);
  return 0;
}





OUTPUT


PROGRAM 6

6. Develop a menu driven Program in C for the following operations on Circular QUEUE of Characters (Array Implementation of Queue with maximum size MAX)
a. Insert an Element on to Circular QUEUE
b. Delete an Element from Circular QUEUE
c. Demonstrate Overflow and Underflow situations on Circular QUEUE
d. Display the status of Circular QUEUE
e. Exit
Support the program with appropriate functions for each of the above operations.

#include<stdio.h>
#include<stdlib.h>
#define max 4
int item,q[max],i;
int count=0;
int front=0;
int rear=-1;

void insert(int item,int *count,int *q,int*rear){
  if(*count==max){
    printf("\nCircular Queue is Full!");
  }
  else{
    *rear = (*rear+1)%max;
    q[*rear]=item;
    (*count)++;
  }
}

void del(int *count , int *q , int *front){
  if(*count == 0){
    printf("\nCircular Queue is Empty!");
  }
  else{
    int itemdel = q[*front];
    *front = (*front+1)%max;
    (*count)--;
    printf("\nItem Deleted : %d",itemdel);
  }
}

void display(int front , int count , int q[]){
  if(count==0){
    printf("\nCircular Queue is Empty!");
  }
  else{
    printf("\nContents of Queue are:\n");
    for(i=0;i<count;i++){
      printf("%d\t",q[front]);
      front = (front+1)%max;
    }
  }
}

int main(){
  int ch;
  while(1){
    printf("\n1.Insert\t2.Delete\t3.Display\t4.Exit\nEnter your choice:");
    scanf("%d",&ch);
    switch(ch){
      case 1:
      printf("\nEnter item to be inserted:");
      scanf("%d",&item);
      insert(item,&count,q,&rear);
      break;
      case 2:
      del(&count,q,&front);
      break;
      case 3:
      display(front,count,q);
      break;
      case 4:
      exit(0);
      default:printf("\nInvalid Choice!");
    }
  }
  return 0;
}


OUTPUT

1.Insert        2.Delete        3.Display       4.Exit
Enter your choice:1

Enter item to be inserted:1

1.Insert        2.Delete        3.Display       4.Exit
Enter your choice:1

Enter item to be inserted:2

1.Insert        2.Delete        3.Display       4.Exit
Enter your choice:1

Enter item to be inserted:3

1.Insert        2.Delete        3.Display       4.Exit
Enter your choice:1

Enter item to be inserted:4

1.Insert        2.Delete        3.Display       4.Exit
Enter your choice:1

Enter item to be inserted:5

Circular Queue is Full!
1.Insert        2.Delete        3.Display       4.Exit
Enter your choice:3

Contents of Queue are:
1       2       3       4
1.Insert        2.Delete        3.Display       4.Exit
Enter your choice:2

Item Deleted : 1
1.Insert        2.Delete        3.Display       4.Exit
Enter your choice:2

Item Deleted : 2
1.Insert        2.Delete        3.Display       4.Exit
Enter your choice:3

Contents of Queue are:
3       4
1.Insert        2.Delete        3.Display       4.Exit
Enter your choice:4










PROGRAM 7

7. Develop a menu driven Program in C for the following operations on Singly Linked List (SLL) of Student Data with the fields: USN,Name, Branch, Sem, PhNo
a. Create a SLL of N Students Data by using front insertion.
b. Display the status of SLL and count the number of nodes in it
c. Perform Insertion / Deletion at End of SLL
d. Perform Insertion / Deletion at Front of SLL(Demonstration of stack)
e. Exit

#include<stdio.h>
#include<stdlib.h>
#define max 5

struct node {
  char usn[11];
  char name[15];
  char branch[5];
  int sem;
  char phone[15];
  struct node *next;
};

typedef struct node NODE;

int countnodes(NODE *head){
  NODE *p;
  p=head;
  int count=0;
  while(p!=NULL){

    p=p->next;
    count++;
  }
  return count;
}

NODE* getnode(){
  NODE *newnode;
  newnode = (NODE*)malloc(sizeof(NODE));
  newnode->next=NULL;
  if(newnode==NULL){
    printf("Memory allocation failed!!");
    return 0;
  }
  else{
    printf("Enter USN:");
    scanf("%s",newnode->usn);
    printf("Enter Name:");
    scanf("%s",newnode->name);
    printf("Enter Branch:");
    scanf("%s",newnode->branch);
    printf("Enter Sem:");
    scanf("%d",&newnode->sem);
    printf("Enter Phone No:");
    scanf("%s",newnode->phone);
  }
  return newnode;
}


NODE* display(NODE* head){
  NODE *p;
  if(head==NULL){
    printf("No Student Details to Display !!\n");
    return head;
  }
  else{
    printf("\nUSN\t\tNAME\t\tBRANCH\t\tSEM\t\tPHONE NO.\n");
    p=head;
    while(p!=NULL){
      printf("%s\t%s\t\t%s\t\t%d\t\t%s\n",p->usn,p->name,p->branch,p->sem,p->phone);
      p=p->next;
    }
  }
  printf("\nThe number of nodes in the list is : %d",countnodes(head));
  return head;
}

NODE* insert_front(NODE *head){
  if(max == countnodes(head)){
    printf("Database Full !!\n");
    return head;
  }
  NODE *newnode;
  newnode = getnode();
  newnode->next = head;
  return newnode;
}

NODE* insert_rear(NODE *head){
  if(max == countnodes(head)){
    printf("Database Full !!\n");
    return head;
  }
  NODE *temp , *newnode;
  temp = head;
  newnode = getnode();
  if(head==NULL){
    return newnode;
  }
  else{
    while(temp->next!=NULL){
      temp=temp->next;
    }
    temp->next=newnode;
    return head;
  }
}

NODE* del_front(NODE *head){
  if(countnodes(head)==0){
    printf("Database Empty !!\n");
    return head;
  }
  NODE *temp;
  temp = head;
  head = head->next;
  free(temp);
  printf("Data Deleted!!\n");
  return head;
}

NODE* del_rear(NODE *head) {
    if (head == NULL) {
        printf("\nDatabase Empty !!\n");
        return head;
    }
    if (head->next == NULL) {
        free(head);
        printf("Data Deleted!!\n");
        return NULL;
    }
    NODE *temp = head;
    while (temp->next->next != NULL) {
        temp = temp->next;
    }
    free(temp->next);
    temp->next = NULL;
    printf("Data Deleted!!\n");
    return head;
}


NODE* del(NODE *head){
  int ch;
  while (ch!=3) {
    printf("1.del_front\t2.del_rear\t3.Exit\nEnter your choice:\t");
    scanf("%d",&ch);
    switch(ch){
      case 1 :head = del_front(head);
              head = display(head);
              break;
      case 2 :head = del_rear(head);
              head = display(head);
              break;
      case 3 :break;
    }
  }
  return head;
}

NODE* insert(NODE *head){
  int ch;
  while (ch!=3) {
    printf("1.insert_front\t2.insert_rear\t3.Exit\nEnter your choice:\t");
    scanf("%d",&ch);
    switch(ch){
      case 1 :head = insert_front(head);
              head = display(head);
              break;
      case 2 :head = insert_rear(head);
              head = display(head);
              break;
      case 3 :break;
    }
  }
  return head;
}

NODE* stack(NODE *head){
  int ch;
  do{
    printf("\nSSL used as Stack...");
    printf("\n 1.Insert at Front(PUSH) \t 2.Delete from Front(POP))\t3.Exit");
    printf("\nEnter your choice: ");
    scanf("%d", &ch);
    switch(ch){
      case 1: head=insert_front(head);
              head = display(head);
              break;
      case 2: head=del_front(head);
              head = display(head);
              break;
      case 3: break;
    }
  }while(ch!=3);
  return head;
}

NODE* create(NODE *head){
  NODE *newnode;
  if(head==NULL){
    newnode=getnode();
    head=newnode;
  }
  else{
    head = insert_front(head);
  }
  return  head;
}

int main(){
int ch, i, n;
NODE *head;
head=NULL;
printf("\n*----------StudentDatabase-----------*");
do{
  printf("\n 1.Create\t 2.Display\t 3.Insert\t 4.Delete\t 5.Stack\t 6.Exit");
  printf("\nEnter your choice: ");
  scanf("%d", &ch);
  switch(ch){
    case 1: printf("\nHow many student data you want to create: ");
            scanf("%d", &n);
            for(i=0;i<n;i++){
              printf("Enter Student%d Details:--\n",i+1);
              head = create(head);
            }
            break;
    case 2: head=display(head);
            break;
    case 3: head=insert(head);
            break;
    case 4: head=del(head);
            break;
    case 5: head=stack(head);
            break;
    case 6: break;
  }
}while(ch!=6);
return 0;
}




OUTPUT:

*----------StudentDatabase-----------*
 1.Create        2.Display       3.Insert        4.Delete        5.Stack         6.Exit
Enter your choice: 1

How many student data you want to create: 2

Enter Student1 Details:--
Enter USN:1BI22IS079
Enter Name:PRAKHAR
Enter Branch:ISE
Enter Sem:3
Enter Phone No:9406737945

Enter Student2 Details:--
Enter USN:1BI22IS0XX
Enter Name:XXXXXXX
Enter Branch:ISE
Enter Sem:3
Enter Phone No:9999999991

 1.Create        2.Display       3.Insert        4.Delete        5.Stack         6.Exit
Enter your choice: 2

USN                  NAME             BRANCH          SEM             PHONE NO.
1BI22IS0XX     XXXXXXX     ISE                    3                   9999999991
1BI22IS079       PRAKHAR      ISE                    3                   9406737945

The number of nodes in the list is : 2
 1.Create        2.Display       3.Insert        4.Delete        5.Stack         6.Exit
Enter your choice: 3

1.insert_front  2.insert_rear   3.Exit
Enter your choice:      1
Enter USN:1BI22IS0FF
Enter Name:FFFFFFF
Enter Branch:ISE
Enter Sem:3
Enter Phone No:9191919191

USN                  NAME             BRANCH          SEM             PHONE NO.
1BI22IS0FF      FFFFFFF          ISE                    3                   9191919191
1BI22IS0XX     XXXXXXX     ISE                    3                   9999999991
1BI22IS079       PRAKHAR      ISE                    3                   9406737945

The number of nodes in the list is : 3
1.insert_front  2.insert_rear   3.Exit
Enter your choice:      2
Enter USN:1BI22IS0RR
Enter Name:RRRRRRR
Enter Branch:ISE
Enter Sem:3
Enter Phone No:7894612301

USN                   NAME            BRANCH          SEM             PHONE NO.
1BI22IS0FF       FFFFFFF         ISE                    3                   9191919191
1BI22IS0XX      XXXXXXX    ISE                    3                   9999999991
1BI22IS079        PRAKHAR     ISE                    3                   9406737945
1BI22IS0RR       RRRRRRR     ISE                    3                   7894612301

The number of nodes in the list is : 4
1.insert_front  2.insert_rear   3.Exit
Enter your choice:      3

 1.Create        2.Display       3.Insert        4.Delete        5.Stack         6.Exit
Enter your choice: 5

SSL used as Stack...
 1.Insert at Front(PUSH)         2.Delete from Front(POP))      3.Exit
Enter your choice: 1
Enter USN:1BI22IS0SS
Enter Name:SSSSSSS
Enter Branch:ISE
Enter Sem:3
Enter Phone No:1123456789

USN                   NAME            BRANCH          SEM             PHONE NO.
1BI22IS0SS       SSSSSSS         ISE                    3                   1123456789
1BI22IS0FF       FFFFFFF         ISE                    3                   9191919191
1BI22IS0XX     XXXXXXX     ISE                    3                   9999999991
1BI22IS079       PRAKHAR      ISE                    3                   9406737945
1BI22IS0RR      RRRRRRR      ISE                    3                   7894612301

The number of nodes in the list is : 5

SSL used as Stack...
 1.Insert at Front(PUSH)         2.Delete from Front(POP))      3.Exit
Enter your choice: 2
Data Deleted!!

USN                   NAME            BRANCH          SEM             PHONE NO.
1BI22IS0FF       FFFFFFF         ISE                    3                   9191919191
1BI22IS0XX     XXXXXXX     ISE                    3                   9999999991
1BI22IS079       PRAKHAR      ISE                    3                   9406737945
1BI22IS0RR      RRRRRRR      ISE                    3                   7894612301

The number of nodes in the list is : 4
SSL used as Stack...
 1.Insert at Front(PUSH)         2.Delete from Front(POP))      3.Exit
Enter your choice: 3

USN                   NAME            BRANCH          SEM             PHONE NO.
1BI22IS0FF       FFFFFFF         ISE           	     3             	   9191919191
1BI22IS0XX     XXXXXXX     ISE          	     3            	   9999999991
1BI22IS079       PRAKHAR      ISE         	     3           	   9406737945
1BI22IS0RR      RRRRRRR      ISE        	     3          	   7894612301

The number of nodes in the list is : 4
 1.Create        2.Display       3.Insert        4.Delete        5.Stack         6.Exit
Enter your choice: 4

1.del_front     2.del_rear      3.Exit
Enter your choice:      1
Data Deleted!!

USN                   NAME            BRANCH          SEM             PHONE NO.
1BI22IS0XX     XXXXXXX     ISE          	     3            	   9999999991
1BI22IS079       PRAKHAR      ISE         	     3           	   9406737945
1BI22IS0RR      RRRRRRR      ISE        	     3          	   7894612301

The number of nodes in the list is : 3
1.del_front     2.del_rear      3.Exit
Enter your choice:      2
Data Deleted!!

USN            	 NAME              BRANCH          SEM             PHONE NO.
1BI22IS0XX    XXXXXXX      ISE           	      3       	   9999999991
1BI22IS079      PRAKHAR       ISE       	      3       	   9406737945

The number of nodes in the list is : 2
1.del_front     2.del_rear      3.Exit
Enter your choice:      3

 1.Create        2.Display       3.Insert        4.Delete        5.Stack         6.Exit
Enter your choice: 2

USN           	  NAME             BRANCH          SEM             PHONE NO.
1BI22IS0XX     XXXXXXX     ISE          	      3                   9999999991
1BI22IS079      PRAKHAR       ISE         	      3                   9406737945

The number of nodes in the list is : 2
 1.Create        2.Display       3.Insert        4.Delete        5.Stack         6.Exit




PROGRAM 8

8. Develop a menu driven Program in C for the following operations on Doubly Linked List (DLL) of Employee Data with the fields: SSN,Name, Dept, Designation, Sal, PhNo
a. Create a DLL of N Employees Data by using end insertion.
b. Display the status of DLL and count the number of nodes in it
c. Perform Insertion and Deletion at End of DLL
d. Perform Insertion and Deletion at Front of DLL
e. Demonstrate how this DLL can be used as Double Ended Queue
f. Exit

#include<stdio.h>
#include<stdlib.h>
#define max 5
struct node{
  int ssn;
  char name[15];
  char dept[10];
  char desig[20];
  int salary;
  char phno[15];
  struct node *prev;
  struct node *next;
};
typedef struct node NODE;

int countnodes(NODE *head){
  NODE *temp;
  int count = 0;
  if(head==NULL){
    return 0;
  }
  else{

    temp=head;
    while(temp){
      count++;
      temp=temp->next;
    }
  }
  return count;
}
NODE* getnode(){
  NODE *newnode;
  newnode = (NODE*)malloc(sizeof(NODE));
  if(newnode==NULL){
    printf("\nMemory allocation failed!!\n");
  }
  else{
    newnode->prev=newnode->next=NULL;
    printf("Enter SSN:");
    scanf("%d",&newnode->ssn);
    printf("Enter Name:");
    scanf("%s",newnode->name);
    printf("Enter Department:");
    scanf("%s",newnode->dept);
    printf("Enter Designation:");
    scanf("%s",newnode->desig);
    printf("Enter Salary:");
    scanf("%d",&newnode->salary);
    printf("Enter PhoneNo.:");
    scanf("%s",newnode->phno);
  }
  return newnode;
}
NODE* display(NODE *head){
  if(countnodes(head)==0){
    printf("Database Empty!!");
    return head;
  }
  else{
    printf("SSN\tNAME\t\tDEPARTMENT\tDESIGNATION\tSALARY\tPHONENO\n");
    NODE *temp;
    temp = head;
    while(temp!=NULL){
      printf("%d\t%s\t\t%s\t\t%s\t%d\t%s\n",temp->ssn,temp->name,temp->dept,temp->desig,temp->salary,temp->phno);
      temp=temp->next;
    }
  }
  printf("Total number of nodes : %d\n",countnodes(head));
  return head;
}
NODE* insertrear(NODE *head){
  NODE *temp;
  NODE *newnode;
  newnode = getnode();
  if(head==NULL){
    return newnode;
  }
  else if (countnodes(head)==max){
    printf("Database Full!!");
    return head;
  }
  else{
    temp=head;
    while(temp->next!=NULL){
      temp=temp->next;
    }
    temp->next = newnode;
    newnode->prev = temp;
    return head;
  }
}
NODE* insertfront(NODE *head){
  NODE *newnode;
  newnode = getnode();
  if(head==NULL){
    return newnode;
  }
  else if (countnodes(head)==max){
    printf("Database Full!!");
    return head;
  }
  else{
    newnode->next=head;
    head->prev=newnode;
    return newnode;
  }
}
NODE* insert(NODE *head){
  int ch=0 ;
  while(ch!=3){
    printf("1insert_front\t2.insert_rear\t3.Exit\nEnter your choice:");
    scanf("%d",&ch);
    switch(ch){
      case 1:
      head = insertfront(head);
      head=display(head);
      break;
      case 2:
      head = insertrear(head);
      head=display(head);
      break;
      case 3:
      break;
    }
  }
  return head;
}
NODE* del_rear(NODE *head){
  if(head==NULL){
    printf("Database empty!\n");
    return head;
  }
  if(head->next==NULL){
    free(head->next);
    printf("Data Deleted!\n");
    return head;
  }
  NODE *temp;
  temp=head;
  while(temp->next->next!=NULL){
    temp=temp->next;
  }
  free(temp->next);
  temp->next=NULL;
  printf("Data Deleted!\n");
  return head;
}
NODE* del_front(NODE *head){
  if(head==NULL){
    printf("Database Empty\n");
    return head;
  }
  NODE *temp;
  temp=head;
  head=head->next;
  free(temp);
  printf("\nData Deleted!");
  return head;
}
NODE* del(NODE *head){
  int ch = 0; // Initialize ch
  while(ch!=3){
    printf("1.del_front\t2del_rear\t3.Exit\nEnter your choice:");
    scanf("%d",&ch);
    switch(ch){
      case 1:
      head = del_front(head);
      head=display(head);
      break;
      case 2:
      head =del_rear(head);
      head=display(head);
      break;
      case 3:
      break;
    }
  }
  return head;
}
NODE* dqueue(NODE *head) {
    int ch;
    while (1) {
        printf("\n DLL used as Double Ended Queue");
        printf("\n 1. Insert at Rear\n 2. Delete from Front\n 3. Insert at Front\n 4. Delete from Rear\n 5. Display\n 6. Exit");
        printf("\nEnter your choice: ");
        scanf("%d", &ch);
        switch (ch) {
            case 1:
                head = insertrear(head);
                head=display(head);
                break;
            case 2:
                head = del_front(head);
                head=display(head);
                break;
            case 3:
                head = insertfront(head);
                head=display(head);
                break;
            case 4:
                head = del_rear(head);
                head=display(head);
                break;
            case 5:
                head = display(head);
                break;
            case 6:
                return head;
        }
    }
}

NODE* create(NODE *head){
  NODE *newnode;
  if(head==NULL){
    newnode=getnode(head);
    head=newnode;
  }
  else{
    head = insertfront(head);
  }
  return  head;
}
int main(){
  NODE *head;
  head = NULL;
  int ch ,n;
  while(1){
    printf("-------EMPLOYEE DATABASE SYSTEM ------");
    printf("\n1.Create\t2.Display\t3.Insert\t4.Delete\t5.Queue\t6.Exit\nEnter your choice:");
    scanf("%d",&ch);
    switch(ch){
      case 1:
      printf("How many records you want to create? : ");
      scanf("%d",&n);
      for(int i=0;i<n;i++){
        printf("\nEnter Employee%d Details:--\n",i+1);
        head = create(head);
      }
      break;
      case 2 :
      head = display(head);
      break;
      case 3:
      head = insert(head);
      break;
      case 4:
      head = del(head);
      break;
      case 5:
      head = dqueue(head);
      break;
      case 6:
      exit(0);
      default:
      printf("Invalid choice!!");
    }
  }
  return 0;
}

OUTPUT
-------EMPLOYEE DATABASE SYSTEM ------
1.Create        2.Display       3.Insert        4.Delete        5.Queue 6.Exit
Enter your choice:1
How many records you want to create? : 2
Enter Employee1 Details:--
Enter SSN:1
Enter Name:AAAAA
Enter Department:ISE
Enter Designation:INSTRUCTOR
Enter Salary:20000
Enter PhoneNo.:1234567890

Enter Employee2 Details:--
Enter SSN:2
Enter Name:BBBBB
Enter Department:ISE
Enter Designation:INSTRUCTOR
Enter Salary:25000
Enter PhoneNo.:4569832170
-------EMPLOYEE DATABASE SYSTEM ------
1.Create        2.Display       3.Insert        4.Delete        5.Queue 6.Exit
Enter your choice:2
SSN     NAME            DEPARTMENT      DESIGNATION     SALARY  PHONENO
2          BBBBB            ISE           	         INSTRUCTOR      25000        4569832170
1          AAAAA           ISE           	         INSTRUCTOR      20000        1234567890
Total number of nodes : 2
-------EMPLOYEE DATABASE SYSTEM ------
1.Create        2.Display       3.Insert        4.Delete        5.Queue 6.Exit
Enter your choice:3
1inset_front    2.insert_rear   3Exit
Enter your choice:1
Enter SSN:3
Enter Name:FFFFF
Enter Department:ISE
Enter Designation:INSTRUCTOR
Enter Salary:30000
Enter PhoneNo.:4569871230
SSN     NAME            DEPARTMENT      DESIGNATION     SALARY  PHONENO
3          FFFFF              ISE           	         INSTRUCTOR      30000        4569871230
2          BBBBB            ISE           	         INSTRUCTOR      25000        4569832170
1          AAAAA           ISE           	         INSTRUCTOR      20000        1234567890
Total number of nodes : 3
1inset_front    2.insert_rear   3Exit
Enter your choice:2
Enter SSN:4
Enter Name:RRRRR
Enter Department:ISE
Enter Designation:INSTRUCTOR
Enter Salary:35000
Enter PhoneNo.:4563271890
SSN     NAME            DEPARTMENT      DESIGNATION     SALARY  PHONENO
3          FFFFF              ISE           	         INSTRUCTOR      30000        4569871230
2          BBBBB            ISE          	         INSTRUCTOR      25000        4569832170
1          AAAAA           ISE           	         INSTRUCTOR      20000        1234567890
4          RRRRR            ISE           	         INSTRUCTOR      35000        4563271890
Total number of nodes : 4
1inset_front    2.insert_rear   3Exit
Enter your choice:3
-------EMPLOYEE DATABASE SYSTEM ------
1.Create        2.Display       3.Insert        4.Delete        5.Queue 6.Exit
Enter your choice:5

 DLL used as Double Ended Queue
 1. Insert at Rear
 2. Delete from Front
 3. Insert at Front
 4. Delete from Rear
 5. Display
 6. Exit
Enter your choice: 1
Enter SSN:5
Enter Name:INSERTF
Enter Department:ISE
Enter Designation:INSTRUCTOR
Enter Salary:40000
Enter PhoneNo.:1237894560
SSN     NAME            DEPARTMENT      DESIGNATION     SALARY  PHONENO
3          FFFFF              ISE      	         INSTRUCTOR      30000        4569871230
2          BBBBB            ISE         	         INSTRUCTOR      25000        4569832170
1          AAAAA           ISE           	         INSTRUCTOR      20000        1234567890
4          RRRRR            ISE         	         INSTRUCTOR      35000        4563271890
5          INSERTF         ISE                          INSTRUCTOR      40000        1237894560
Total number of nodes : 5

 DLL used as Double Ended Queue
 1. Insert at Rear
 2. Delete from Front
 3. Insert at Front
 4. Delete from Rear
 5. Display
 6. Exit
Enter your choice: 2
Data Deleted!
SSN     NAME            DEPARTMENT      DESIGNATION     SALARY  PHONENO
2          BBBBB            ISE        	         INSTRUCTOR      25000        4569832170
1          AAAAA           ISE        	         INSTRUCTOR      20000        1234567890
4          RRRRR            ISE        	         INSTRUCTOR      35000        4563271890
5          INSERTF         ISE        	         INSTRUCTOR      40000        1237894560
Total number of nodes : 4
 DLL used as Double Ended Queue
 1. Insert at Rear
 2. Delete from Front
 3. Insert at Front
 4. Delete from Rear
 5. Display
 6. Exit
Enter your choice: 3
Enter SSN:6
Enter Name:INSERTQ
Enter Department:ISE
Enter Designation:INSTRUCTOR
Enter Salary:50000
Enter PhoneNo.:4536987120
SSN     NAME            DEPARTMENT      DESIGNATION     SALARY  PHONENO
6          INSERTQ         ISE         	         INSTRUCTOR      50000        4536987120
2          BBBBB            ISE        	         INSTRUCTOR      25000        4569832170
1          AAAAA           ISE        	         INSTRUCTOR      20000        1234567890
4          RRRRR            ISE        	         INSTRUCTOR      35000        4563271890
5          INSERTF         ISE        	         INSTRUCTOR      40000        1237894560
Total number of nodes : 5
 DLL used as Double Ended Queue
 1. Insert at Rear
 2. Delete from Front
 3. Insert at Front
 4. Delete from Rear
 5. Display
 6. Exit
Enter your choice: 4
Data Deleted!
SSN     NAME            DEPARTMENT      DESIGNATION     SALARY  PHONENO
6          INSERTQ         ISE         	         INSTRUCTOR      50000        4536987120
2          BBBBB            ISE        	         INSTRUCTOR      25000        4569832170
1          AAAAA           ISE        	         INSTRUCTOR      20000        1234567890
4          RRRRR            ISE        	         INSTRUCTOR      35000        4563271890
Total number of nodes : 4

 DLL used as Double Ended Queue
 1. Insert at Rear
 2. Delete from Front
 3. Insert at Front
 4. Delete from Rear
 5. Display
 6. Exit
Enter your choice: 5
SSN     NAME            DEPARTMENT      DESIGNATION     SALARY  PHONENO
6          INSERTQ         ISE         	         INSTRUCTOR      50000        4536987120
2          BBBBB            ISE        	         INSTRUCTOR      25000        4569832170
1          AAAAA           ISE        	         INSTRUCTOR      20000        1234567890
4          RRRRR            ISE        	         INSTRUCTOR      35000        4563271890
Total number of nodes : 4
 DLL used as Double Ended Queue
 1. Insert at Rear
 2. Delete from Front
 3. Insert at Front
 4. Delete from Rear
 5. Display
 6. Exit
Enter your choice: 6
-------EMPLOYEE DATABASE SYSTEM ------
1.Create        2.Display       3.Insert        4.Delete        5.Queue 6.Exit
Enter your choice:4
1del_front      2del_rear       3.Exit
Enter your choice:1
Data Deleted!
SSN     NAME            DEPARTMENT      DESIGNATION     SALARY  PHONENO
2          BBBBB            ISE        	         INSTRUCTOR      25000        4569832170
1          AAAAA           ISE        	         INSTRUCTOR      20000        1234567890
4          RRRRR            ISE        	         INSTRUCTOR      35000        4563271890
Total number of nodes : 3
1del_front      2del_rear       3.Exit
Enter your choice:2
Data Deleted!
SSN     NAME            DEPARTMENT      DESIGNATION     SALARY  PHONENO
2          BBBBB            ISE        	         INSTRUCTOR      25000        4569832170
1          AAAAA           ISE        	         INSTRUCTOR      20000        1234567890
Total number of nodes : 2
1del_front      2del_rear       3.Exit
Enter your choice:3
-------EMPLOYEE DATABASE SYSTEM ------
1.Create        2.Display       3.Insert        4.Delete        5.Queue 6.Exit
Enter your choice:6






